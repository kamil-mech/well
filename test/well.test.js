// TODO:
// - Six more test cases
// - Check dev_setup
// - Can you ever be a member of two teams at the same time?

// ADD COPYRIGHT INFO OR A DISCLAIMER
"use strict";

var _ = require('underscore') // see http://npmjs.org/m/underscore
var util = require('util')
var assert = require('assert')
var seneca  = require('seneca')()

// Init well.js
seneca.use('options','../options.well.js')
var options = seneca.export('options')
options.dev_setup = options.well.dev_setup // <- This is not normal, check if app should really work like this

// If you want to change the tester to use autogenerated data from well.js:
// options.fake = true // set fake flag so it autogenerates sample data

seneca.use('user')
seneca.use('../well',options)

var userent  = seneca.make('sys/user')
var teament  = seneca.make('team')
var eventent  = seneca.make('event')

// Used to create sample data
var data_quantity = 3
var data_loaded = 0
var entities_loaded // callback used when all entities are loaded

describe('seneca, role:well', function(){

	before(function(done){
		// Skip if data is autogenerated by well.js
		if (options.fake) return;
		entities_loaded = done

		// Loads events, then triggers loading teams, then triggers loading users
		// It's done this way because each entity set depends on the finished loading of previous one
		load_events(events_ready)
	})

	it('cmd:leader', function(done){

		eventent.list$(function(err,events){
			if( err ) return done(err)

			// Get list of teams in event 0 through leader cmd
			seneca.act('role:well, cmd:leader', {event:events[0]}, function(err, leader){

				// Get list of teams in event 0 directly from db
				teament.list$({event:events[0].id},function(err,dblist){
					if( err ) return done(err)

					// Format both lists into arrays of names(leader does not contain id data)
					dblist = dblist.map(function (element) {
						return element.name
					})
					leader = leader.teams.map(function (element) {
						return element.name
					})

					// Compare team names
					assert.deepEqual(dblist, leader)

					// Make sure no unwanted elements are contained within the array
					assert.equal(leader.indexOf('Blue'),-1)

					done()
				})
			})
		})
	})

	it ('cmd:members', function(done){
		// TODO
		assert.equal('TO BE IMPLEMENTED', 1)
		done()
	})

	it ('cmd:whoami', function(done){
		// TODO
		assert.equal('TO BE IMPLEMENTED', 1)
		done()
	})

	it ('cmd:well', function(done){
		// TODO
		assert.equal('TO BE IMPLEMENTED', 1)
		done()
	})

	it ('cmd:member', function(done){
		// TODO
		assert.equal('TO BE IMPLEMENTED', 1)
		done()
	})

	it ('cmd:createevent', function(done){
		// TODO
		assert.equal('TO BE IMPLEMENTED', 1)
		done()
	})

	it ('cmd:joinevent', function(done){
		// TODO
		assert.equal('TO BE IMPLEMENTED', 1)
		done()
	})
})

// =========================================================================================================================
// ================================================Preloading Functions=====================================================

function add_user_to_event(user, event){
	seneca.act('role:well, cmd:joinevent', {user:user, event:event}, function(err, data){
	    if( err ) return console.log(err);

	    data_loaded++
	    if (data_loaded < data_quantity) return

		// Finalizing init
		return entities_loaded()
	})
}

function events_ready(next){
	data_loaded++
	if (data_loaded < data_quantity) return

	eventent.list$({}, function(err, events){
		if( err ) return console.log(err)

		// Teams init
		data_quantity = 3
		data_loaded = 0
		return load_teams(teams_ready)
	})
}

function teams_ready(){
	data_loaded++
	if (data_loaded < data_quantity) return

	teament.list$({}, function(err, teams){
		if( err ) return console.log(err)					

		// Users init
		data_quantity = 4
		data_loaded = 0
		return load_users(users_ready)
	})
}

function users_ready(){
	eventent.list$(function(err,events){
		if( err ) return done(err)
		data_loaded++
		if (data_loaded < data_quantity) return

		userent.list$({}, function(err, users){
			if( err ) return console.log(err)	

			// Insert users into events
			data_quantity = 5
			data_loaded = 0
			for (var i = 0; i < 5; i++){
				add_user_to_event(users[i], events[0])
			}
		})
	})
}

function load_events(event_loaded){
	eventent.make$(_.extend({
			numcards: 52,
			numteams: 2,
			name:     'MeetupA',
			code:     'ma',
			users:    {}
		},_.omit({name:'MeetupA', code:'ma'},['role','cmd']))).save$( function(err, event){
			if( err ) return console.log(err)
			event_loaded()
		})

		eventent.make$(_.extend({
			numcards: 52,
			numteams: 2,
			name:     'MeetupB',
			code:     'mb',
			users:    {}
		},_.omit({name:'MeetupB', code:'mb'},['role','cmd']))).save$( function(err, event){
			if( err ) return console.log(err);
			event_loaded()
		})

		eventent.make$(_.extend({
			numcards: 52,
			numteams: 2,
			name:     'MeetupC',
			code:     'mc',
			users:    {}
		},_.omit({name:'MeetupC', code:'mc'},['role','cmd']))).save$( function(err, event){
			if( err ) return console.log(err)
			event_loaded()
		})
}


function load_teams(team_loaded){
	eventent.list$(function(err,events){
		if( err ) return done(err)

		// Add a team to event with index 0
		teament.make$({
	      num:0, 
	      event:events[0].id, 
	      eventcode:events[0].code,
	      name:'Red',
	      wells:{},
	      numwells:0,
	      users:{}
	    }).save$(function(err, entity){
	    	if (err) return console.log(err)
	        team_loaded()
	    })

		// Add a team to a different event (and later make sure the event 0 does not contain it)
		teament.make$({
	      num:1, 
	      event:events[0].id, 
	      eventcode:events[0].code,
	      name:'Tan',
	      wells:{},
	      numwells:0,
	      users:{}
	    }).save$(function(err, entity){
	    	if (err) return console.log(err)
	    	team_loaded()
	    })


		// Add a team to a different event (and later make sure the event 0 does not contain it)
		teament.make$({
	      num:0, 
	      event:events[1].id, 
	      eventcode:events[1].code,
	      name:'Blue',
	      wells:{},
	      numwells:0,
	      users:{}
	    }).save$(function(err, entity){
	    	if (err) return console.log(err)
	    	team_loaded()
	    })
	})
}

function load_users(user_loaded){
    for( var i = 0; i < 4; i++ ) {

		// Use the cmd:register action of the seneca-user plugin to register the fake users
		// This ensures they are created properly
		seneca.act('role:user,cmd:register',{nick:'u'+i,name:'n'+i,password:'p'+i}, function(err, data){
			if (err) return console.log(err)
			user_loaded()
		})
    }
}

// =========================================================================================================================
// =================================================Utility functions=======================================================

function list_all(){
	eventent.list$(function(err,dblist){
		if( err ) return done(err)
	  console.log("\n\t\t ---");
	  console.log("\t\tEvents\n");
		dblist.forEach(function(element){
			console.log(element + '\n')
		})
	  console.log("\n\t\t ---\n");
	})

	teament.list$(function(err,dblist){
		console.log("\n\t\t ---");
		console.log("\t\tTeams\n");
		if( err ) return done(err)
		dblist.forEach(function(element){
			console.log(element + '\n')
		})
		console.log("\n\t\t ---\n");
	})

	userent.list$(function(err,dblist){
		console.log("\n\t\t ---");
		console.log("\t\tUsers\n");
		if( err ) return done(err)
		dblist.forEach(function(element){
			console.log(element + '\n')
		})
		console.log("\n\t\t ---\n");
	})
}

function showCommands(){
  console.log("\n\t\t---");
  console.log("\tSENECA COMMANDS AVAILABLE:\n");
  seneca.list().forEach(function(element){ console.log(element)})
  console.log("\n\t\t---\n");
}

function showRoutes(){
  seneca.act('role:web, cmd:routes', function(err, routes) {
    console.log("\n\t\t---");
    console.log("\tSENECA ROUTES AVAILABLE:\n");
    console.log(routes);
    console.log("\n\t\t---\n");
  });
}